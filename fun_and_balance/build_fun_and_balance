#!/usr/bin/env ruby

require_relative "../lib/paradox_mod_builder"
require_relative "./fun_and_balance_common"

class FunAndBalanceModBuilder < ParadoxModBuilder
  include FunAndBalanceCommon

  def allowed_conversions(group_name, name)
    if group_name == "christian"
      ["protestant", "catholic",  "reformed", "orthodox", "coptic"] - [name]
    elsif group_name == "muslim"
      ["sunni", "shiite", "ibadi"] - [name]
    elsif name == "buddhism"
       ["hinduism", "confucianism", "shinto"]
    elsif name == "hinduism"
      ["sikhism", "buddhism"]
    elsif group_name == "eastern"
       ["buddhism", "confucianism", "shinto"] - [name]
    elsif group_name == "dharmic"
      ["hinduism", "sikhism"] - [name]
    else
      nil
    end
  end

  def on_convert(religion, *extras)
    PropertyList[
      "change_religion", religion,
      *extras,
      "add_country_modifier", PropertyList["name", "conversion_zeal", "duration", 3650],
    ]
  end

  def patch_religion!
    patch_mod_file!("common/religions/00_religion.txt") do |node|
      node.each do |group_name, group|
        group.each do |name, religion|
          next if name == "crusade_name" or name == "defender_of_faith"
          if conversions = allowed_conversions(group_name, name)
            religion["allowed_conversion"] = conversions
          end

          if group_name == "muslim"
            religion["on_convert"] = on_convert(
              name,
              "add_stability", -2,
              "add_piety", -1,
            )
          end

          if name == "shinto"
            religion["on_convert"] = on_convert(
              name,
              "add_prestige", -100,
              "remove_country_modifier", "monastic_education_system",
              "remove_country_modifier", "neo_confucianism",
              "remove_country_modifier", "denounce_taoism",
            )
          end

          if name == "buddhism"
            religion["on_convert"] = on_convert(
              name,
              "add_prestige", -100,
              "remove_country_modifier", "the_haridasa_movement",
              "remove_country_modifier", "the_advaita_movement",
              "remove_country_modifier", "religious_sect_tolerance",
              "remove_country_modifier", "neo_confucianism",
              "remove_country_modifier", "denounce_taoism",
            )
          end

          if name == "confucianism"
            religion["on_convert"] = on_convert(
              name,
              "add_prestige", -100,
              "remove_country_modifier", "monastic_education_system",
            )
          end

          if name == "hinduism"
            religion["on_convert"].add! "remove_country_modifier", "monastic_education_system"
          end

          if name == "orthodox" or name == "coptic"
            religion["on_convert"] = on_convert(
              name,
              "add_prestige", -100,
              "remove_country_modifier", "the_test_act",
              "remove_country_modifier", "superintendent_office",
              "remove_country_modifier", "the_popery_act",
              "remove_country_modifier", "counter_reformation",
              "remove_country_modifier", "the_statue_in_restraint_of_appeals",
              "remove_country_modifier", "bavarian_jesuits",
              "remove_country_modifier", "the_societas_jesu",
              "remove_country_modifier", "the_declaration_of_indulgence",
              "remove_country_modifier", "de_heretico_comburendo",
              "remove_country_modifier", "the_conventicle_act",
            )
          end

          if group_name == "pagan"
            religion["country"]["enemy_core_creation"] = -0.5
            religion["province"]["local_missionary_strength"] = 0.03
          else
            religion["province"].delete("local_missionary_strength") if religion["province"]
          end
        end
      end
    end
  end

  def holy_sites_by_religion
    {
      catholic:     ["Roma", "Judea / Jerusalem", "Thrace / Constantinople", "Galicia / Santiago de Compostela", "Kent / Cantenbury"],
      protestant:   ["Roma", "Judea / Jerusalem", "Thrace / Constantinople", "Galicia / Santiago de Compostela", "Kent / Cantenbury"],
      reformed:     ["Roma", "Judea / Jerusalem", "Thrace / Constantinople", "Galicia / Santiago de Compostela", "Kent / Cantenbury"],
      orthodox:     ["Roma", "Judea / Jerusalem", "Thrace / Constantinople", "Macedonia / Mount Athos", "Kiev"],
      coptic:       ["Roma", "Judea / Jerusalem", "Thrace / Constantinople", "Alexandria", "Tigre / Ark of the Covenant"],

      sunni:        ["Mecca", "Judea / Jerusalem", "Thrace / Constantinople", "Cordoba", "Karbala"],
      shiite:       ["Mecca", "Judea / Jerusalem", "Thrace / Constantinople", "Cordoba", "Karbala"],
      ibadi:        ["Mecca", "Judea / Jerusalem", "Thrace / Constantinople", "Cordoba", "Karbala"],

      # Varanasi, Chidambaram, Angkor Wat - Hindu
      # Palitana - Jain
      # Harmandir Sahib - Sikh
      hinduism:     ["Jaunpur / Varanasi", "Coromandel / Chidambaram", "Gujarat / Palitana", "Siem Reap / Angkor Wat", "Punjab / Harmandir Sahib"],
      sikhism:      ["Jaunpur / Varanasi", "Coromandel / Chidambaram", "Gujarat / Palitana", "Siem Reap / Angkor Wat", "Punjab / Harmandir Sahib"],

      # TODO:
      buddhism:     ["Bihar / Bodhgaya / 558", "Siem Reap / Angkor Wat", "Shandong / Qufu", "Owari / Ise Jingu", "Gyeongsang / Bulguksa"],
      confucianism: ["Bihar / Bodhgaya / 558", "Siem Reap / Angkor Wat", "Shandong / Qufu", "Owari / Ise Jingu", "Gyeongsang / Bulguksa"],
      shinto:       ["Bihar / Bodhgaya / 558", "Siem Reap / Angkor Wat", "Shandong / Qufu", "Owari / Ise Jingu", "Gyeongsang / Bulguksa"],

      # Not getting any ever
      shamanism:    [],
      animism:      [],
      totemism:     [],
    }
  end


  def site_information(site)
    province, name, id = site.split(/\s*\/\s*/)
    id ||= province_id(province)
    short_name = name || province
    name = name ? "#{name} (#{province})" : "#{province}"
    {province: province, name: name, short_name: short_name, id: id}
  end

  def add_holy_site!(religion, site, n)
    trigger_name = "holy_sites_#{religion}_#{n}"
    localization! "holy_sites",
      trigger_name => "#{site[:short_name]} is #{religion.to_s.capitalize}",
      "desc_#{trigger_name}" => "#{religion.to_s.capitalize} rulers control holy site #{site[:name]}"
    [trigger_name, PropertyList[
      "potential", PropertyList["religion", religion],
      "trigger", PropertyList[site[:id], PropertyList["owner", PropertyList["religion", religion]]],
      "global_missionary_strength", 0.002,
    ]]
  end

  def add_holy_sites_all!(religion, sites)
    # For sake of balance keep it at 0 or 5
    raise "Expected 0 or 5 sites, not #{sites.size}" unless sites.size == 5
    trigger_name = "holy_sites_#{religion}"
    localization! "holy_sites",
      trigger_name           => "All #{religion.to_s.capitalize} holy sites",
      "desc_#{trigger_name}" => "#{religion.to_s.capitalize} controls all its holy sites #{ sites.map{|x| x[:name]}.join(", ") }."
    [trigger_name, PropertyList[
      "potential", PropertyList["religion", religion],
      "trigger", PropertyList[
        *sites.map{|site| [site[:id], PropertyList["owner", PropertyList["religion", religion]]] }.flatten(1)
      ],
      "global_missionary_strength", 0.010,
      "prestige", 1,
    ]]
  end

  def add_holy_site_mission!(religion, site, n)
    id = site[:id]
    mission_name = "conquest_#{religion}_holy_site_#{n}"
    localization! "holy_sites",
      "#{mission_name}_title" => "Conquer Holy Sity #{site[:short_name]}",
      "#{mission_name}_desc" => "We must not allow infidels to hold our holy site #{site[:name]}!"
    [mission_name, PropertyList[
      "type", "country",
      "category", "MIL",
      "ai_mission", true,
      "allow", PropertyList[
        "religion", religion,
        "OR", PropertyList[
          id, PropertyList["owner", PropertyList["is_neighbor_of", "ROOT"]],
          "has_idea", "deus_vult",
        ],
        "is_subject", false,
        id, PropertyList[
          "owner", PropertyList["NOT", PropertyList["religion", religion]],
          "has_discovered", "ROOT",
        ],
      ],
      "success", PropertyList[
        id, PropertyList["owner" , PropertyList["religion", religion]],
      ],
      "abort", PropertyList[
        "OR", PropertyList[
          "is_subject", true,
          "NOT", PropertyList["religion", religion],
        ]
      ],
      "immediate", PropertyList["add_claim", id],
      "abort_effect", PropertyList["remove_claim", id],
      "chance", PropertyList[
        "factor", 1000,
        "modifier", PropertyList["factor", 10, "is_neighbor_of", "ROOT"],
        "modifier", PropertyList["factor", 2, "has_idea", "deus_vult"]
      ],
      "effect", PropertyList["add_adm_power", 200],
    ]]
  end

  def feature_holy_sites!
    missions = []
    triggers = []
    holy_sites_by_religion.each do |religion, sites|
      next if sites.empty?
      sites = sites.map{|s| site_information(s)}
      sites.each_with_index do |s,i|
        triggers << add_holy_site!(religion, s, i+1)
        missions << add_holy_site_mission!(religion, s, i+1)
      end
      triggers << add_holy_sites_all!(religion, sites)
    end

    create_mod_file! "common/triggered_modifiers/holy_sites.txt", PropertyList[*triggers.flatten(1)]
    create_mod_file! "missions/Holy_Sites_Missions.txt", PropertyList[*missions.flatten(1)]
  end

  def feature_partial_westernization!
    localization! "partial_westernization",
      "partial_westernization_title" => "Reform The Government",
      "partial_westernization_desc"  => "Reform the government as much along Western lines as you currently can."
    create_mod_file! "decisions/PartialWesternization.txt", PropertyList[
      "country_decisions", PropertyList[
        "partial_westernization", PropertyList[
          "major", true,
          "potential", PropertyList[
            "OR", PropertyList[
              "technology_group", "south_american",
              "technology_group", "mesoamerican",
              "technology_group", "north_american",
              "technology_group", "sub_saharan",
              "technology_group", "chinese",
              "technology_group", "indian",
            ],
            "is_subject", false,
          ],
          "allow", PropertyList[
            "stability", 2,
            "OR", PropertyList[
              "stability", 3,
              "adm_tech", 8,
            ],
            "is_at_war", false,
            "NOT", PropertyList["num_of_revolts", 1],
            "adm_power", 250,
            "dip_power", 250,
            "mil_power", 250,
            "any_neighbor_country", PropertyList[
              "OR", PropertyList[
                "technology_group", "muslim",
                "technology_group", "eastern",
                "technology_group", "ottoman",
                "technology_group", "western",
              ],
            ],
          ],
          "effect", PropertyList[
            "change_technology_group", "muslim",
            "add_stability", -5,
            "add_adm_power", -250,
            "add_dip_power", -250,
            "add_mil_power", -250,
            "add_country_modifier", PropertyList[
              "name", "western_influences",
              "duration", 3650,
            ],
          ],
          "ai_will_do", PropertyList["factor", 1],
        ]
      ]
    ]
  end

  def each_country_primary_culture
    @game.glob("common/cultures/*.txt").each do |path|
      @game.parse(path).each do |group_name, group|
        group = group.to_h
        group.delete "graphical_culture"
        group.delete "dynasty_names"
        group.each do |culture_name, details|
          next if details.is_a?(Array)
          details = details.to_h
          details.delete "dynasty_names"
          yield culture_name, details["primary"]
        end
      end
    end
  end

  def feature_extra_formable_countries!
    already_formable = %W[
      BRZ BUK BYZ CAM CAN CHL COL EGY ENG FRA GBR GER GRE HAB HAN HAT HIN
      IRE ITA JAP KUR LAP LOU MEX MSA MUG NED PER PEU PLC PRG PRU QNG QUE
      RMN RUS SCA SPA SPI USA VNZ WES]
    cant_by_formed_by = %W[HLR PAP HIN MUG SPA FRA GER BYZ BUK ITA RUS SCA PER GBR PLC EGY VIJ]

    decisions = []
    each_country_primary_culture do |culture, tag|
      next if already_formable.include?(tag)
      next if tag == "MOS" # Form Russia instead
      next if tag == "CZH" or tag == "CSH" # Chinese minors can't be formed
      decisions << "country_decisions"
      decisions << PropertyList[
        "extra_formable_form_#{tag}", PropertyList[
          "major", true,
          "potential", PropertyList[
            "NOT", PropertyList["exists", tag],
            *cant_by_formed_by.map{|ct| ["NOT", PropertyList["tag", ct]] }.flatten(1),
            "primary_culture", culture,
          ],
          "allow", PropertyList[
            "adm_tech", 10,
            "num_of_cities", 3,
            "is_subject", false,
            "is_at_war", false,
            "is_tribal", false,
            "NOT", PropertyList["any_province", PropertyList[
              "culture", culture,
              "NOT", PropertyList["owned_by", "ROOT"],
              "NOT", PropertyList["is_core", "ROOT"],
            ]],
          ],
          "effect", PropertyList[
            "change_tag", tag,
            "add_country_modifier", PropertyList[
              "name", "centralization_modifier",
              "duration", 7300,
            ],
            "add_prestige", 25,
            "swap_free_idea_group", true,
          ],
          "ai_will_do", PropertyList["factor", 1],
        ],
      ]

      loc_tag = @game.localization(tag)
      loc_culture = @game.localization(culture)
      localization! "extra_formable_countries",
        "extra_formable_form_#{tag}_title" => "Form #{loc_tag}",
        "extra_formable_form_#{tag}_desc"  => "Our country is one true home of #{loc_culture} people, let's call it #{loc_tag}!"
    end
    create_mod_file! "decisions/extra_formable_countries.txt", PropertyList[
      *decisions
    ]
  end

  def always_display_policies!
    @game.glob("common/policies/*.txt").each do |policy_file|
      patch_mod_file!(policy_file) do |node|
        node.each_value do |policy|
          policy["potential"].delete("has_idea_group")
        end
      end
    end
  end

  def reverse_horde_nerfs!
    patch_mod_file!("decisions/ManchuDecisions.txt") do |node|
      node["country_decisions"]["form_manchu_dynasty"]["allow"].delete("is_tribal")
      node["country_decisions"]["form_manchu_dynasty"]["effect"]["if"]["change_government"] = "despotic_monarchy"
    end

    patch_mod_file!("decisions/MughalNation.txt") do |node|
      node["country_decisions"]["mughal_nation"]["allow"].delete("is_tribal")
      node["country_decisions"]["mughal_nation"]["effect"]["if"]["change_government"] = "despotic_monarchy"
    end

    patch_mod_file!("decisions/PersianNation.txt") do |node|
      node["country_decisions"]["persian_nation"]["allow"].delete("is_tribal")
      node["country_decisions"]["persian_nation"]["effect"]["if"]["change_government"] = "despotic_monarchy"
    end

    patch_mod_file!("decisions/Tribal.txt") do |node|
      node["country_decisions"].each_value do |decision|
        decision["allow"]["stability"] = 2
        decision["allow"].add! "OR", PropertyList["stability", 3, "adm_tech", 8]
        decision["allow"].delete_if do |*kv|
          kv == ["OR", PropertyList["full_idea_group", "economic_ideas", "full_idea_group", "innovativeness_ideas", "full_idea_group", "administrative_ideas"]]
        end
        decision["potential"].delete_if do |*kv|
          kv == ["OR", PropertyList["ai", false, "full_idea_group", "economic_ideas", "full_idea_group", "innovativeness_ideas", "full_idea_group", "administrative_ideas"]]
        end
      end
    end

    patch_mod_file!("common/governments/00_governments.txt") do |node|
      node["steppe_horde"]["global_manpower_modifier"] = 1.0
      node["steppe_horde"]["land_forcelimit_modifier"] = 1.0
      node["steppe_horde"]["land_maintenance_modifier"] = -0.5
    end
  end

  def anyone_can_form_byzantium!
    patch_mod_file!("decisions/RestoreByzantineEmpire.txt") do |node|
      node["country_decisions"]["restore_byzantine_empire"]["potential"].delete_if do |k,v|
        k == "NOT" and (v == PropertyList["tag", "HLR"] or v == PropertyList["tag", "TUR"])
      end
    end
  end

  def build_mod_files!
    patch_defines_lua!([
      ["SCALED_TRUCE_YEARS", 10, 0],
      ["ANNEX_DIP_COST_PER_BASE_TAX", 15, 1],
      ["MAX_ACTIVE_POLICIES", 5, 10],
      ["POLICY_COST", 1, 0],
      ["FOREIGN_REBEL_SUPPORT", 4, 6],
      ["WESTERN_POWER_TICK_REDUCTION_FACTOR", 15, 1000000],
      ["ADVISOR_COST_INCREASE_PER_YEAR", 0.01,  0.005],
      ["CULTURE_GAIN_THRESHOLD", "0.20", "0.10"],
      ["POWER_MAX", 999, 1500],
      ["PS_BUILD_BUILDING", 10, 5],
      ["PS_MOVE_TRADE_PORT", 300, 100],
      ["PS_CHANGE_CULTURE", 25, 10],
      ["CLAIM_LOSE", 25, 50],
      ["CORE_LOSE", 50, 100],
      ["CORE_LOSE_CULTURE_GROUP", 150, 300],
      ["CORE_TIME_SIZE_MODIFIER", 0.04, 0.0],
      ["PROTECTORATE_TECH_THRESHOLD", 0.5, 5.0],
      ["PROTECTORATE_LOWER_BOUND", 0.5, 5.0],
      ["VASSAL_FABRICATE_CLAIMS", 0, 1],
      ["AI_BUY_PROVINCE_SUBJECT_MAX_OE", 0, 50],
      ["VASSALIZE_BASE_TAX_CAP", 40, 10000],
      ["GREAT_POWER_ALLIANCE_PENALTY", 50, 25],
      ["PEACE_TIME_EARLY_FACTOR", 0.75, 0.50],
      ["PEACE_WAR_EXHAUSTION_FACTOR", 1.0, 2.5],
    ])

    patch_mod_file!("common/static_modifiers/00_static_modifiers.txt") do |node|
      unless node["base_values"]["global_missionary_strength"] == 0.02
        raise "Expect base missionary strength to equal 2%"
      end
      node["base_values"]["diplomatic_upkeep"] = 8
      node["base_values"]["global_missionary_strength"] = 0.01
      node["base_values"]["global_heretic_missionary_strength"] = 0.01
      node["war"] = PropertyList[] if node["war"] == []
      node["war"]["war_exhaustion_cost"] = 100
      node["emperor"]["diplomatic_upkeep"] = 2
      node["inverse_religious_unity"]["global_revolt_risk"] = 5
      node["war_exhaustion"]["defensiveness"] = -0.02
      node["war_exhaustion"]["land_morale"] = -0.02
      node["war_exhaustion"]["naval_morale"] = -0.02
      node["positive_stability"]["global_missionary_strength"] = 0.007
      node["non_accepted_culture"]["local_revolt_risk"] = 4
    end

    always_display_policies!
    anyone_can_form_byzantium!
    change_elections_to_eu3_style!
    dont_destroy_buildings_on_conquest!
    double_diplo_rel_limit_from_ideas!
    feature_extra_formable_countries!
    feature_holy_sites!
    feature_partial_westernization!
    feature_return_vassal_cores!
    fix_opinions!
    fix_peasant_war!
    fix_wargoals!
    make_improve_relations_mission_relevant!
    no_naval_attrition!
    patch_religion!
    reduce_religious_center_penalty!
    restore_hre_ia_on_prince_religion_change!
    remove_burgundy_inheritance!
    move_burgundy_capital_to_hre!
    reverse_horde_nerfs!
    smooth_oe_scaling!
  end
end

mb = FunAndBalanceModBuilder.new(
  ParadoxGame.new("eu4"),
  "fun_and_balance-1.7.3"
)
mb.build!
