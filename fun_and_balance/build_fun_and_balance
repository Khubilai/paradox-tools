#!/usr/bin/env ruby

require_relative "../lib/paradox_mod_builder"

class FunAndBalanceModBuilder < ParadoxModBuilder
  def allowed_conversions(group_name, name)
    if group_name == "christian"
      ["catholic", "coptic", "orthodox", "protestant", "reformed"] - [name]
    elsif group_name == "muslim"
      ["sunni", "shiite", "ibadi"] - [name]
    elsif name == "buddhism"
       ["hinduism", "confucianism", "shinto"]
    elsif name == "hinduism"
      ["sikhism", "buddhism"]
    elsif group_name == "eastern"
       ["buddhism", "confucianism", "shinto"] - [name]
    elsif group_name == "dharmic"
      ["hinduism", "sikhism"] - [name]
    else
      nil
    end
  end

  def eu3_style_elections!(node)
    node.delete("change_adm")
    node.delete("change_dip")
    node.delete("change_mil")
    node["add_scaled_republican_tradition"] *= 0.3 if node["add_scaled_republican_tradition"]
    node["define_ruler"].delete("fixed") if node["define_ruler"]
    eu3_style_elections! node["FROM"] if node["FROM"]
    eu3_style_elections! node["tooltip"] if node["tooltip"]
  end

  def patch_religion!
    patch_mod_file!("common/religions/00_religion.txt") do |node|
      node.each do |group_name, group|
        group.each do |name, religion|
          next if name == "crusade_name" or name == "defender_of_faith"
          if conversions = allowed_conversions(group_name, name)
            religion["allowed_conversion"] = conversions
          end

          if group_name == "pagan"
            religion["country"]["enemy_core_creation"] = -0.5
            religion["province"]["local_missionary_strength"] = 0.03
          else
            religion["province"].delete("local_missionary_strength") if religion["province"]
          end
        end
      end
    end
  end

  def holy_sites_by_religion
    {
      catholic:     ["Roma", "Judea / Jerusalem", "Thrace / Constantinople", "Galicia / Santiago de Compostela", "Kent / Cantenbury"],
      protestant:   ["Roma", "Judea / Jerusalem", "Thrace / Constantinople", "Galicia / Santiago de Compostela", "Kent / Cantenbury"],
      reformed:     ["Roma", "Judea / Jerusalem", "Thrace / Constantinople", "Galicia / Santiago de Compostela", "Kent / Cantenbury"],
      orthodox:     ["Roma", "Judea / Jerusalem", "Thrace / Constantinople", "Macedonia / Mount Athos", "Kiev"],
      coptic:       ["Roma", "Judea / Jerusalem", "Thrace / Constantinople", "Alexandria", "Tigre / Ark of the Covenant"],

      sunni:        ["Mecca", "Judea / Jerusalem", "Thrace / Constantinople", "Cordoba", "Karbala"],
      shiite:       ["Mecca", "Judea / Jerusalem", "Thrace / Constantinople", "Cordoba", "Karbala"],
      ibadi:        ["Mecca", "Judea / Jerusalem", "Thrace / Constantinople", "Cordoba", "Karbala"],

      # Varanasi, Chidambaram, Angkor Wat - Hindu
      # Palitana - Jain
      # Harmandir Sahib - Sikh
      hinduism:     ["Jaunpur / Varanasi", "Coromandel / Chidambaram", "Gujarat / Palitana", "Siem Reap / Angkor Wat", "Punjab / Harmandir Sahib"],
      sikhism:      ["Jaunpur / Varanasi", "Coromandel / Chidambaram", "Gujarat / Palitana", "Siem Reap / Angkor Wat", "Punjab / Harmandir Sahib"],

      # TODO:
      buddhism:     ["Bihar / Bodhgaya / 558", "Siem Reap / Angkor Wat", "Shandong / Qufu", "Owari / Ise Jingu", "Gyeongsang / Bulguksa"],
      confucianism: ["Bihar / Bodhgaya / 558", "Siem Reap / Angkor Wat", "Shandong / Qufu", "Owari / Ise Jingu", "Gyeongsang / Bulguksa"],
      shinto:       ["Bihar / Bodhgaya / 558", "Siem Reap / Angkor Wat", "Shandong / Qufu", "Owari / Ise Jingu", "Gyeongsang / Bulguksa"],

      # Not getting any ever
      shamanism:    [],
      animism:      [],
      totemism:     [],
    }
  end

  def province_id(province_name)
    matches = @game.glob("history/provinces/* - #{province_name}.txt")
    raise "No match for #{province_name}" unless matches.size == 1
    matches[0].basename.to_s.to_i
  end

  def site_information(site)
    province, name, id = site.split(/\s*\/\s*/)
    id ||= province_id(province)
    short_name = name || province
    name = name ? "#{name} (#{province})" : "#{province}"
    {province: province, name: name, short_name: short_name, id: id}
  end

  def add_holy_site!(religion, site, n)
    trigger_name = "holy_sites_#{religion}_#{n}"
    add_localization! "holy_sites", trigger_name, "#{site[:short_name]} is #{religion.to_s.capitalize}"
    add_localization! "holy_sites", "desc_#{trigger_name}", "#{religion.to_s.capitalize} rulers control holy site #{site[:name]}"
    [trigger_name, PropertyList[
      "potential", PropertyList["religion", religion],
      "trigger", PropertyList[site[:id], PropertyList["owner", PropertyList["religion", religion]]],
      "global_missionary_strength", 0.002,
    ]]
  end

  def add_holy_sites_all!(religion, sites)
    # For sake of balance keep it at 0 or 5
    raise "Expected 0 or 5 sites, not #{sites.size}" unless sites.size == 5
    trigger_name = "holy_sites_#{religion}"
    add_localization! "holy_sites", trigger_name, "All #{religion.to_s.capitalize} holy sites"
    add_localization! "holy_sites", "desc_#{trigger_name}", "#{religion.to_s.capitalize} controls all its holy sites #{ sites.map{|x| x[:name]}.join(", ") }."
    [trigger_name, PropertyList[
      "potential", PropertyList["religion", religion],
      "trigger", PropertyList[
        *sites.map{|site| [site[:id], PropertyList["owner", PropertyList["religion", religion]]] }.flatten(1)
      ],
      "global_missionary_strength", 0.010,
      "prestige", 1,
    ]]
  end

  def add_holy_site_mission!(religion, site, n)
    id = site[:id]
    mission_name = "conquest_#{religion}_holy_site_#{n}"
    add_localization! "holy_sites", "#{mission_name}_title", "Conquer Holy Sity #{site[:short_name]}"
    add_localization! "holy_sites", "#{mission_name}_desc", "We must not allow infidels to hold our holy site #{site[:name]}!"
    [mission_name, PropertyList[
      "type", "country",
      "category", "MIL",
      "ai_mission", true,
      "allow", PropertyList[
        "religion", religion,
        "OR", PropertyList[
          id, PropertyList["owner", PropertyList["is_neighbor_of", "ROOT"]],
          "has_idea", "deus_vult",
        ],
        "is_subject", false,
        id, PropertyList[
          "owner", PropertyList["NOT", PropertyList["religion", religion]],
          "has_discovered", "ROOT",
        ],
      ],
      "success", PropertyList[
        id, PropertyList["owner" , PropertyList["religion", religion]],
      ],
      "abort", PropertyList[
        "OR", PropertyList[
          "is_subject", true,
          "NOT", PropertyList["religion", religion],
        ]
      ],
      "immediate", PropertyList["add_claim", id],
      "abort_effect", PropertyList["remove_claim", id],
      "chance", PropertyList[
        "factor", 1000,
        "modifier", PropertyList["factor", 10, "is_neighbor_of", "ROOT"],
        "modifier", PropertyList["factor", 2, "has_idea", "deus_vult"]
      ],
      "effect", PropertyList["add_adm_power", 200],
    ]]
  end

  def feature_holy_sites!
    missions = []
    triggers = []
    holy_sites_by_religion.each do |religion, sites|
      next if sites.empty?
      sites = sites.map{|s| site_information(s)}
      sites.each_with_index do |s,i|
        triggers << add_holy_site!(religion, s, i+1)
        missions << add_holy_site_mission!(religion, s, i+1)
      end
      triggers << add_holy_sites_all!(religion, sites)
    end

    create_mod_file! "common/triggered_modifiers/holy_sites.txt", PropertyList[*triggers.flatten(1)]
    create_mod_file! "missions/Holy_Sites_Missions.txt", PropertyList[*missions.flatten(1)]
  end

  def feature_partial_westernization!
    add_localization! "partial_westernization", "partial_westernization_title", "Reform The Government"
    add_localization! "partial_westernization", "partial_westernization_desc", "Reform the government as much along Western lines as you currently can."
    create_mod_file! "decisions/PartialWesternization.txt", PropertyList[
      "country_decisions", PropertyList[
        "partial_westernization", PropertyList[
          "major", true,
          "potential", PropertyList[
            "OR", PropertyList[
              "technology_group", "south_american",
              "technology_group", "mesoamerican",
              "technology_group", "north_american",
              "technology_group", "sub_saharan",
              "technology_group", "chinese",
              "technology_group", "indian",
            ],
            "is_subject", false,
          ],
          "allow", PropertyList[
            "stability", 2,
            "OR", PropertyList[
              "stability", 3,
              "adm_tech", 8,
            ],
            "is_at_war", false,
            "NOT", PropertyList["num_of_revolts", 1],
            "adm_power", 250,
            "dip_power", 250,
            "mil_power", 250,
            "any_neighbor_country", PropertyList[
              "OR", PropertyList[
                "technology_group", "muslim",
                "technology_group", "eastern",
                "technology_group", "ottoman",
                "technology_group", "western",
              ],
            ],
          ],
          "effect", PropertyList[
            "change_technology_group", "muslim",
            "add_stability", -5,
            "add_adm_power", -250,
            "add_dip_power", -250,
            "add_mil_power", -250,
            "add_country_modifier", PropertyList[
              "name", "western_influences",
              "duration", 3650,
            ],
          ],
          "ai_will_do", PropertyList["factor", 1],
        ]
      ]
    ]
  end
  def feature_return_vassal_cores!
    add_localization! "return_vassal_cores", "return_vassal_cores", "Return Subject's Core"
    add_localization! "return_vassal_cores", "return_vassal_cores_desc", "These provinces rightfully belong to your subject. Wargoal is to liberate them."
    add_localization! "return_vassal_cores", "war_goal_take_vassal_core", "Take subject core $PROV$"
    add_localization! "return_vassal_cores", "war_goal_take_vassal_core_desc", "War goal is to take subject's core $PROV$."
    create_mod_file! "common/cb_types/return_vassal_cores_cb.txt", PropertyList[
      "return_vassal_cores", PropertyList[
        "prerequisites", PropertyList[
          "FROM", PropertyList[
            "NOT", PropertyList["is_subject_of", "ROOT"],
            "any_owned_province", PropertyList[
              "any_country", PropertyList[
                "is_subject_of", "ROOT",
                "is_core", "PREV",
              ],
            ],
          ],
        ],
        "war_goal", "take_vassal_core",
      ]
    ]
    create_mod_file! "common/wargoal_types/return_vassal_cores_wargoal.txt", PropertyList[
      "take_vassal_core", PropertyList[
        "type", "take_province",
        "po_release_vassals", true,
        "po_release_annexed", true,
        "po_return_cores", true,
        "po_revoke_cores", true,
        "po_gold", true,
        "po_concede_defeat", true,
        "badboy_factor", 1,
        "prestige_factor", 1,
        "peace_cost_factor", 1,
        "po_annex", true,
        "allowed_provinces", PropertyList[
          "any_country", PropertyList[
            "is_subject_of", "ROOT",
            "is_core", "PREV",
          ],
        ],
        "allow_leader_change", true,
        "war_name", "LIBERATION_WAR_NAME",
      ]
    ]
  end

  def build_mod_files!
    patch_defines_lua!([
      ["SCALED_TRUCE_YEARS", 10, 0],
      ["ANNEX_DIP_COST_PER_BASE_TAX", 15, 1],
      ["MAX_ACTIVE_POLICIES", 5, 10],
      ["POLICY_COST", 1, 0],
      ["FOREIGN_REBEL_SUPPORT", 4, 6],
      ["WESTERN_POWER_TICK_REDUCTION_FACTOR", 15, 1000000],
      ["ADVISOR_COST_INCREASE_PER_YEAR", 0.01,  0.005],
      ["CULTURE_GAIN_THRESHOLD", "0.20", "0.10"],
      ["POWER_MAX", 999, 1500],
      ["PS_BUILD_BUILDING", 10, 5],
      ["PS_MOVE_TRADE_PORT", 300, 100],
      ["PS_CHANGE_CULTURE", 25, 10],
      ["CLAIM_LOSE", 25, 50],
      ["CORE_LOSE", 50, 100],
      ["CORE_LOSE_CULTURE_GROUP", 150, 300],
      ["CORE_TIME_SIZE_MODIFIER", 0.04, 0.0],
      ["PROTECTORATE_TECH_THRESHOLD", 0.5, 5.0],
      ["PROTECTORATE_LOWER_BOUND", 0.5, 5.0],
      ["VASSAL_FABRICATE_CLAIMS", 0, 1],
      ["AI_BUY_PROVINCE_SUBJECT_MAX_OE", 0, 50],
      ["VASSALIZE_BASE_TAX_CAP", 40, 10000],
    ])

    patch_mod_file!("events/GenericOnActionEvents.txt") do |node|
      node.find_all("country_event").each do |event|
        if event["option"]["add_republican_tradition"]
          event["option"]["add_republican_tradition"] = -0.03
        end
      end
    end

    patch_mod_file!("common/buildings/00_buildings.txt") do |node|
      node.each_value do |building|
        if building["spare_on_core"] == true
          building.delete "spare_on_core"
          building["destroy_on_conquest"] = false
        end
      end
    end

    patch_mod_file!("common/event_modifiers/00_event_modifiers.txt") do |node|
      unless node["religious_center"]["local_missionary_strength"] == -0.05
        raise "Expected important missionary center to have -5% missionary strength"
      end
      node["religious_center"]["local_missionary_strength"] = -0.02
    end

    @game.glob("common/policies/*.txt").each do |policy_file|
      patch_mod_file!(policy_file) do |node|
        node.each_value do |policy|
          policy["potential"].delete("has_idea_group")
        end
      end
    end

    @game.glob("common/ideas/*.txt").each do |ideas_file|
      patch_mod_file!(ideas_file) do |node|
          node.each do |group_name, idea_group|
          idea_group.each do |name, idea|
            next if %W[category trigger ai_will_do important free].include?(name)
            next if idea == [] # Empty idea
            if name == "siberian_frontier"
              idea.delete "colonists"
            end
            if idea["diplomatic_upkeep"] == 1
              idea["diplomatic_upkeep"] = 2
            end
          end
        end
      end
    end

    patch_mod_file!("common/static_modifiers/00_static_modifiers.txt") do |node|
      unless node["base_values"]["global_missionary_strength"] == 0.02
        raise "Expect base missionary strength to equal 2%"
      end
      node["base_values"]["diplomatic_upkeep"] = 8
      node["base_values"]["global_missionary_strength"] = 0.01
      node["base_values"]["global_heretic_missionary_strength"] = 0.01
      node["war"] = PropertyList[] if node["war"] == []
      node["war"]["war_exhaustion_cost"] = 100
      node["emperor"]["diplomatic_upkeep"] = 2
      node["inverse_religious_unity"]["global_revolt_risk"] = 5
      node["war_exhaustion"]["defensiveness"] = -0.02
      node["war_exhaustion"]["land_morale"] = -0.02
      node["war_exhaustion"]["naval_morale"] = -0.02
      node["positive_stability"]["global_missionary_strength"] = 0.007
      node["non_accepted_culture"]["local_revolt_risk"] = 4
    end

    patch_mod_file!("common/governments/00_governments.txt") do |node|
      node["steppe_horde"]["global_manpower_modifier"] = 1.0
      node["steppe_horde"]["land_forcelimit_modifier"] = 1.0
      node["steppe_horde"]["land_maintenance_modifier"] = -0.5
    end

    patch_mod_file!("common/on_actions/00_on_actions.txt") do |node|
      node["on_hre_member_true_religion"]["events"] = [903]
    end

    patch_mod_file!("common/opinion_modifiers/00_opinion_modifiers.txt") do |node|
      node["aggressive_expansion"]["yearly_decay"] = 4
      node["opinion_annex_vassal"]["min"] = -100
    end

    patch_mod_file!("missions/Diplomatic_Missions.txt") do |node|
      node["improve_relations_mission"]["effect"]["FROM"]["add_prestige"] = 10
      node["improve_relations_mission"]["effect"]["FROM"]["add_dip_power"] = 25
    end

    patch_mod_file!("decisions/RestoreByzantineEmpire.txt") do |node|
      node["country_decisions"]["restore_byzantine_empire"]["potential"].delete_if do |k,v|
        k == "NOT" and (v == PropertyList["tag", "HLR"] or v == PropertyList["tag", "TUR"])
      end
    end

    patch_mod_file!("common/technologies/dip.txt") do |node|
      node.find_all("technology").each_with_index do |tech,i|
        if i == 0
          tech["reduced_naval_attrition"] = true
        else
          tech.delete("reduced_naval_attrition")
        end
      end
    end

    patch_mod_file!("events/PeasantsWar.txt") do |node|
      node.find_all("country_event").each do |event|
        next unless event["id"] == "peasants_war.1"
        event["trigger"] # apply fixes here
      end
    end

    patch_mod_file!("events/Elections.txt") do |node|
      node.find_all("country_event").each do |event|
        event.find_all("option").each do |option|
          eu3_style_elections!(option)
        end
      end
    end

    patch_mod_file!("common/wargoal_types/00_wargoal_types.txt") do |node|
      node["take_province_ban"]["badboy_factor"] = 0.1
      node["superiority_heretic"].delete("allowed_provinces")
      node["superiority_heretic"]["peace_cost_factor"] = 0.25
      node["superiority_heretic"].delete("po_demand_provinces")
    end

    patch_mod_file!("events/GenericOnActionEvents.txt") do |node|
      node.find_all("country_event").each do |event|
        if event["id"] == 610 # integrating vassal
          event["option"]["add_republican_tradition"] *= 0.3
        end
      end
    end

    patch_mod_file!("decisions/ManchuDecisions.txt") do |node|
      node["country_decisions"]["form_manchu_dynasty"]["allow"].delete("is_tribal")
      node["country_decisions"]["form_manchu_dynasty"]["effect"]["if"]["change_government"] = "despotic_monarchy"
    end

    patch_mod_file!("decisions/MughalNation.txt") do |node|
      node["country_decisions"]["mughal_nation"]["allow"].delete("is_tribal")
      node["country_decisions"]["mughal_nation"]["effect"]["if"]["change_government"] = "despotic_monarchy"
    end

    patch_mod_file!("decisions/PersianNation.txt") do |node|
      node["country_decisions"]["persian_nation"]["allow"].delete("is_tribal")
      node["country_decisions"]["persian_nation"]["effect"]["if"]["change_government"] = "despotic_monarchy"
    end

    patch_mod_file!("decisions/Tribal.txt") do |node|
      node["country_decisions"].each_value do |decision|
        decision["allow"]["stability"] = 2
        decision["allow"].add! "OR", PropertyList["stability", 3, "adm_tech", 8]
        decision["allow"].delete_if do |*kv|
          kv == ["OR", PropertyList["full_idea_group", "economic_ideas", "full_idea_group", "innovativeness_ideas", "full_idea_group", "administrative_ideas"]]
        end
        decision["potential"].delete_if do |*kv|
          kv == ["OR", PropertyList["ai", false, "full_idea_group", "economic_ideas", "full_idea_group", "innovativeness_ideas", "full_idea_group", "administrative_ideas"]]
        end
      end
    end

    patch_mod_file!("events/PurelyNasty.txt") do |node|
      node.find_all("province_event").each do |event|
        mtth = event["mean_time_to_happen"]
        mtth["months"] *= 4
        mtth.add! "modifier", PropertyList["factor", 0.5, "owner", PropertyList["overextension_percentage", 3.0]]
        mtth.add! "modifier", PropertyList["factor", 0.5, "owner", PropertyList["overextension_percentage", 4.0]]
        mtth.add! "modifier", PropertyList["factor", 0.5, "owner", PropertyList["overextension_percentage", 5.0]]
      end
    end

    patch_mod_file!("events/FlavorBUR.txt") do |node|
      node.delete_if do |key, val|
        key == "country_event" and val["id"] =~ /\Aflavor_bur\.(1|2|3|4|5|6|7|19)\z/
      end
    end

    patch_mod_file!("history/countries/BUR - Burgundy.txt") do |node|
      node["capital"] = 193
    end

    patch_religion!
    feature_holy_sites!
    feature_partial_westernization!
    feature_return_vassal_cores!
  end
end

mb = FunAndBalanceModBuilder.new(
  ParadoxGame.new("eu4"),
  "fun_and_balance-1.7.3"
)
mb.build!
mb.compare_with_reference!("fun_and_balance_reference-1.7.3")
