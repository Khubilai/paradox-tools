#!/usr/bin/env ruby

require "pp"

class String
  def reindent(level=0)
    parts = split("\n")
    parts.shift while parts[0]  !~ /\S/
    parts.pop   while parts[-1] !~ /\S/
    current = parts[0][/\A\s*/].size
    parts = parts.map{|part|
      if part[0, current] == " " * current
        " "*level + part[current..-1] + "\n"
      elsif part !~ /\S/
        "\n"
      else
        raise "Weird indentation"
      end
    }.join
  end
end

class GenerateHolySitesLogic
  def initialize
    @triggers = []
    @loc = []
    @missions = []
  end

  def religions
    {
      catholic:     ["Roma", "Judea / Jerusalem", "Thrace / Constantinople", "Galicia / Santiago de Compostela", "Kent / Cantenbury"],
      protestant:   ["Roma", "Judea / Jerusalem", "Thrace / Constantinople", "Galicia / Santiago de Compostela", "Kent / Cantenbury"],
      reformed:     ["Roma", "Judea / Jerusalem", "Thrace / Constantinople", "Galicia / Santiago de Compostela", "Kent / Cantenbury"],
      orthodox:     ["Roma", "Judea / Jerusalem", "Thrace / Constantinople", "Macedonia / Mount Athos", "Kiev"],
      coptic:       ["Roma", "Judea / Jerusalem", "Thrace / Constantinople", "Alexandria", "Tigre / Ark of the Covenant"],

      sunni:        ["Mecca", "Judea / Jerusalem", "Thrace / Constantinople", "Cordoba", "Karbala"],
      shiite:       ["Mecca", "Judea / Jerusalem", "Thrace / Constantinople", "Cordoba", "Karbala"],
      ibadi:        ["Mecca", "Judea / Jerusalem", "Thrace / Constantinople", "Cordoba", "Karbala"],

      # Varanasi, Chidambaram, Angkor Wat - Hindu
      # Palitana - Jain
      # Harmandir Sahib - Sikh
      hinduism:     ["Jaunpur / Varanasi", "Coromandel / Chidambaram", "Gujarat / Palitana", "Siem Reap / Angkor Wat", "Punjab / Harmandir Sahib"],
      sikhism:      ["Jaunpur / Varanasi", "Coromandel / Chidambaram", "Gujarat / Palitana", "Siem Reap / Angkor Wat", "Punjab / Harmandir Sahib"],

      # TODO:
      buddhism:     ["Bihar / Bodhgaya / 558", "Siem Reap / Angkor Wat", "Shandong / Qufu", "Owari / Ise Jingu", "Gyeongsang / Bulguksa"],
      confucianism: ["Bihar / Bodhgaya / 558", "Siem Reap / Angkor Wat", "Shandong / Qufu", "Owari / Ise Jingu", "Gyeongsang / Bulguksa"],
      shinto:       ["Bihar / Bodhgaya / 558", "Siem Reap / Angkor Wat", "Shandong / Qufu", "Owari / Ise Jingu", "Gyeongsang / Bulguksa"],

      # Not getting any ever
      shamanism:    [],
      animism:      [],
      totemism:     [],
    }
  end

  def province_id(province_name)
    matches = Dir["/home/taw/Dropbox/games/eu4/1.6.2/history/provinces/* - #{province_name}.txt"]
    raise "No match for #{province_name}" unless matches.size == 1
    File.basename(matches[0]).to_i
  end

  def site_information(site)
    province, name, id = site.split(/\s*\/\s*/)
    id ||= province_id(province)
    short_name = name || province
    name = name ? "#{name} (#{province})" : "#{province}"
    {province: province, name: name, short_name: short_name, id: id}
  end

  def site_trigger(religion, site)
    %Q[
  trigger = {
    #{site[:id]} = { # #{site[:name]}
      owner = { religion = #{religion} }
    }
  }
    ]
  end

  def add_sites_all!(religion, sites)
    # For sake of balance keep it at 0 or 5
    raise "Expected 0 or 5 sites, not #{sites.size}" unless sites.size == 5
    trigger_name = "holy_sites_#{religion}"
    @triggers << %Q[
#{trigger_name} = {
  potential = {
    religion = #{religion}
  }
#{site_trigger(religion, sites[0])}
#{site_trigger(religion, sites[1])}
#{site_trigger(religion, sites[2])}
#{site_trigger(religion, sites[3])}
#{site_trigger(religion, sites[4])}
  global_missionary_strength = 0.010
  prestige = 1
}
    ]
    @loc << [trigger_name, "All #{religion.to_s.capitalize} holy sites" ]
    @loc << ["desc_" + trigger_name, "#{religion.to_s.capitalize} controls all its holy sites " + sites.map{|x| x[:name]}.join(", ") + "." ]
  end

  def add_site!(religion, site, n)
    trigger_name = "holy_sites_#{religion}_#{n}"
    @triggers << %Q[
#{trigger_name} = {
  potential = {
    religion = #{religion}
  }
#{site_trigger(religion, site)}
  global_missionary_strength = 0.002
}
    ]
    @loc << [trigger_name, "#{site[:short_name]} is #{religion.to_s.capitalize}" ]
    @loc << ["desc_" + trigger_name, "#{religion.to_s.capitalize} rulers control holy site #{site[:name]}" ]
  end

  def add_mission!(religion, site, n)
    id = site[:id]
    mission_name = "conquest_#{religion}_holy_site_#{n}"
    # ai_mission = yes means AI and human, not AI only, contrary to what wiki claims
    @missions << %Q[#{mission_name} = { # #{site[:name]}
  type = country
  category = MIL
  ai_mission = yes
  allow = {
    religion = #{religion}
    OR = {
      #{id} = {
        owner = {
          is_neighbor_of = ROOT
        }
      }
      has_idea = deus_vult
    }
    is_subject = no
    #{id} = {
      owner = { NOT = { religion = #{religion} } }
      has_discovered = ROOT
    }
  }
  success = {
    #{id} = { owner = { religion = #{religion} } }
  }
  abort = {
    OR = {
      is_subject = yes
      NOT = { religion = #{religion} }
    }
  }
  immediate = { add_claim = #{id} }
  abort_effect = { remove_claim = #{id} }
  chance = {
    factor = 1000
    modifier = {
      factor = 10
      is_neighbor_of = ROOT
    }
    modifier = {
      factor = 2
      has_idea = deus_vult
    }
  }
  effect = {
    add_adm_power = 200
  }
}
]
    @loc << [mission_name+"_title", "Conquer Holy Sity #{site[:short_name]}"]
    @loc << [mission_name+"_desc", "We must not allow infidels to hold our holy site #{site[:name]}!"]
  end

  def run!
    religions.each do |religion, sites|
      next if sites.empty?
      sites = sites.map{|s| site_information(s)}
      sites.each_with_index do |s,i|
        add_site!(religion, s, i+1)
        add_mission!(religion, s, i+1)
      end
      add_sites_all!(religion, sites)
    end
    File.write("fun_and_balance-1.7.0/common/triggered_modifiers/holy_sites.txt", @triggers.join("\n"))
    File.write("fun_and_balance-1.7.0/localisation/holy_sites_l_english.yml", loc)
    File.write("fun_and_balance-1.7.0/missions/Holy_Sites_Missions.txt", @missions.join("\n"))
  end

  def loc
    [0xEF, 0xBB, 0xBF].pack("C*") + # UTF-8 BOM, WTF?
    "l_english:\n" +
    @loc.map{|k,v| " #{k}: \"#{v}\"\n"}.join
  end
end

GenerateHolySitesLogic.new.run!
