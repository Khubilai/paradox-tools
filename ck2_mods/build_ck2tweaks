#!/usr/bin/env ruby

require_relative "../lib/paradox_mod_builder"

class CK2TweaksModBuilder < ParadoxModBuilder::CK2
  def reset_ruler_designer!
    patch_defines_lua!([
      # Start at 0 if you want to go down
      ["BASE_ATTRIB", 5, 5],
      ["BASE_AGE", 16, 16],
      ["BASE_FERTILITY", 0.5, 0.5],
      ["BASE_HEALTH", 5.0, 5.0],
      # Make everything free
      ["COST_ATTRIB", 1.0, 0],
      ["COST_SON", 3.0, 0],
      ["COST_DAUGHTER", 2.0, 0],
      ["COST_MARRIED", 2.0, 0],
      ["COST_FERTILITY", 20.0, 0],
      ["COST_HEALTH", 10.0, 0],
      ["COST_MONTHLY_PRESTIGE", 10.0, 0],
      ["COST_MONTHLY_PIETY", 20.0, 0],
      ["COST_MONTHLY_WEALTH", 10.0, 0],
      ["COST_GLOBAL_TAX", 50.0, 0],
      ["COST_CHURCH_OPINION", 0.5, 0],
      ["COST_SPOUCE_OPINION", 0.5, 0],
      ["COST_SEXAPPEAL_OPINION", 0.5, 0],
      ["COST_DYNASTY_OPINION", 0.5, 0],
      ["COST_VASSAL_OPINION", 1.0, 0],
      ["COST_LIEGE_OPINION", 0.0, 0],
      ["COST_INFIDEL_OPINION", 0.0, 0],
      ["COST_OPPOSITE_TRAIT_OPINION", 0.5, 0],
      ["COST_SAME_TRAIT_OPINION", 0.5, 0],
      ["COST_SAME_RELIGION_OPINION", 0.5, 0],
      ["COST_AMBITION_OPINION", 0.0, 0],
      ["COST_TRIBAL_OPINION", 0.0, 0],
      ["COST_GENERAL_OPINION", 1.0, 0],
      ["COST_MUSLIM_OPINION", 0.25, 0],
      ["COST_JEWISH_OPINION", 0.25, 0],
      ["COST_CHRISTIAN_OPINION", 0.25, 0],
      ["COST_ZOROASTRIAN_OPINION", 0.25, 0],
      ["COST_MORALE_OFFENCE", 50.0, 0],
      ["COST_MORALE_DEFENCE", 50.0, 0],
      ["COST_DEFENCE", 50.0, 0],
      # Max age is irrelevant as all is now 16
      ["MAX_AGE", 50, 50],
    ])
  end

  def fix_gavelkind!
    # Bonus is not applied correctly and is far less than 30% claimed
    # Increase it to balance things out a bit
    patch_defines_lua!([
      ["GAVELKIND_MAX_SIZE_BONUS", "0.30", "0.50"],
    ])
  end

  def reduce_wrong_gov_type_penalties!
    # This punishes feudalizing tribals way too much
    patch_defines_lua!([
      ["WRONG_GOV_FORM_TAX_MOD", -0.75, -0.50],
      ["WRONG_GOV_FORM_LEVY_MOD", -0.75, -0.50],
    ])
  end

  def allow_any_number_of_different_holding_types!
    # A nerf without exploit
    patch_defines_lua!([
      ["MAX_REPUBLIC_COUNTIES_IN_REALM", 0.1, 1.0],
      ["MAX_THEOCRACY_COUNTIES_IN_REALM", 0.1, 1.0],
    ])
  end

  def take_money_from_banished_landed_characters!
    # That's not even particularly gamey
    patch_defines_lua!([
      ["BANISH_TAKE_WEALTH_PERCENTAGE_LANDED", 0, 1],
    ])
  end

  def remove_levy_nerfs!
    # This break feudal character of the game
    patch_defines_lua!([
      ["REBEL_LEADER_MINIMUM_LIEGE_LEVY_MULT",  1,     1],
      ["CAPITAL_COUNTY_VASSAL_COUNT_LEVY_MULT", 1,     1],
      ["CAPITAL_COUNTY_VASSAL_LEVY_MULT",       1.25,  1],
      ["CAPITAL_COUNTY_LEVY_MULT",              1.5,   1],
      ["CAPITAL_COUNTY_LIEGE_LEVY_MULT",        1,     1],
      ["CAPITAL_DUCHY_VASSAL_LEVY_MULT",        1.15,  1],
      ["CAPITAL_DUCHY_LEVY_MULT",               1.25,  1],
      ["CAPITAL_DUCHY_LIEGE_LEVY_MULT",         0.75,  1],
      ["CAPITAL_KINGDOM_LEVY_MULT",             1,     1],
      ["CAPITAL_KINGDOM_LIEGE_LEVY_MULT",       0.5,   1],
      ["CAPITAL_EMPIRE_LEVY_MULT",              1,     1],
      ["CAPITAL_EMPIRE_LIEGE_LEVY_MULT",        0.35,  1],
      ["OUTSIDE_LEVY_MULT",                     1,     1],
      ["OUTSIDE_LIEGE_LEVY_MULT",               0.25,  1],
    ])
  end

  def no_dynastic_country_names!
    patch_mod_files!("common/cultures/*.txt") do |node|
      node.each do |group_name, group|
        group.each do |culture_name, culture|
          next if culture_name == "graphical_culture"
          next if culture_name == "second_graphical_culture"
          culture.delete("dynasty_title_names")
        end
      end
    end
  end

  def allow_intermarriage!
    patch_mod_file!("common/religions/00_religions.txt") do |node|
      all_religions = node.values.map{|group| group.list.select{|_,r| r.is_a?(PropertyList)}.map(&:first)}.flatten
      node.each do |group_name, group|
        group.each do |religion_name, religion|
          next unless religion.is_a?(PropertyList)
          religion.delete("intermarry")
          all_religions.each do |g|
            religion.add! "intermarry", g unless g == religion_name
          end
        end
      end
    end
  end

  def allow_heir_designation!
    patch_mod_file!("common/religions/00_religions.txt") do |node|
      node.each do |group_name, group|
        next if group_name == "muslim"
        group.each do |religion_name, religion|
          next unless religion.is_a?(PropertyList)
          religion["has_heir_designation"] = true
        end
      end
    end
  end

  def pagans_can_go_feudal!
    # Otherwise AI never will
    patch_mod_file!("decisions/realm_decisions.txt") do |node|
      node["decisions"]["adopt_feudalism"]["allow"].delete_if{|k,v| k == "custom_tooltip"}
      node["decisions"]["adopt_republicanism"]["allow"].delete_if{|k,v| k == "custom_tooltip"}
    end
  end

  def more_banishment_reasons!
    patch_mod_file!("common/opinion_modifiers/00_opinion_modifiers.txt") do |node|
      %W[
        opinion_traitor
        opinion_rebel_traitor
        opinion_regicide_traitor
        opinion_witch
        opinion_unfaithful_wife
        opinion_cuckolded
        opinion_charge_illegitimate
        opinion_charge_traitor
      ].each do |op|
        node[op].add! "banish_reason", true
      end
    end
  end

  def add_dynastic_decisions!
    # All these should be filtered etc.
    # Extremely basic functionality only
    decisions = PropertyList[
      "switch_to_spouse_dynasty", PropertyList[
        "filter", "spouse",
        "ai_target_filter", "spouse",
        "from_potential", PropertyList["age", 16],
        "potential", PropertyList["is_married", "FROM"],
        "allow", PropertyList["age", 16],
        "effect", PropertyList["FROM", PropertyList["dynasty", "ROOT"]],
        "revoke_allowed", PropertyList["always", false],
        "ai_will_do", PropertyList["factor", 0],
      ],
      "make_marriage_regular", PropertyList[
        "filter", "spouse",
        "ai_target_filter", "spouse",
        "from_potential", PropertyList["age", 16],
        "potential", PropertyList["is_married", "FROM"],
        "allow", PropertyList["age", 16],
        "effect", PropertyList["FROM", PropertyList["add_spouse", "ROOT"]],
        "revoke_allowed", PropertyList["always", false],
        "ai_will_do", PropertyList["factor", 0],
      ],
      "make_marriage_matrilineal", PropertyList[
        "filter", "spouse",
        "ai_target_filter", "spouse",
        "from_potential", PropertyList["age", 16],
        "potential", PropertyList["is_married", "FROM"],
        "allow", PropertyList["age", 16],
        "effect", PropertyList["FROM", PropertyList["add_spouse_matrilineal", "ROOT"]],
        "revoke_allowed", PropertyList["always", false],
        "ai_will_do", PropertyList["factor", 0],
      ],
      "educate_kin", PropertyList[
        "filter", "dynasty",
        "ai_target_filter", "dynasty",
        "from_potential", PropertyList["age", 16],
        "potential", PropertyList[
          "age", 6,
          Property::NOT["age", 16],
        ],
        # "allow", PropertyList[
          # "is_close_relative", "ROOT",
          # Property::NOT["guardian", "ROOT"],
        # ],
        "effect", PropertyList["set_guardian", "FROM"],
        "revoke_allowed", PropertyList["always", false],
        "ai_will_do", PropertyList["factor", 0],
      ]
    ]

    create_mod_file! "decisions/dynastic_decisions.txt", PropertyList["targetted_decisions", decisions]
    localization!("dynastic_decisions",
      "switch_to_spouse_dynasty" => "Swich to spouse's dynasty",
      "switch_to_spouse_dynasty_desc" => "Abandon your current family name, become part of spouse's dynasty",
      "make_marriage_regular" => "Make marriage regular",
      "make_marriage_regular_desc" => "All children will by of father's dynasty",
      "make_marriage_matrilineal" => "Make marriage matrilineal",
      "make_marriage_matrilineal_desc" => "All children will by of mother's dynasty",
      "educate_kin" => "Educate close kin",
      "educate_kin_desc" => "Can use even if beyond education limit",
    )
  end

  def cognatic_for_most_cultures!
    patch_mod_file!("decisions/succession_laws.txt") do |node|
      node["gender_laws"]["true_cognatic_succession"].delete("allow")
    end
  end

  def dont_mark_conscript_ships_important!
    patch_mod_file!("decisions/unit_decisions.txt") do |node|
      node["decisions"]["conscript_merchant_ships"].delete "is_high_prio"
    end
  end

  def preserve_culture_buildings!
    patch_mod_files!("common/buildings/*.txt") do |node|
      node.each do |category, buildings|
        buildings.each do |name, building|
          next unless building["potential"] and building["potential"]["FROM"].to_s =~ /culture/
          culture_rules = building["potential"]["FROM"]
          building["potential"].delete "FROM"
          building["potential"].add! Property::OR[
            "FROM", culture_rules,
            *culture_rules.list.flatten(1), # This is some awkward code...
            "FROMFROM", PropertyList["has_building", name],
          ]
        end
      end
    end
  end

  def build_mod_files!
    reset_ruler_designer!
    reduce_wrong_gov_type_penalties!
    # remove_levy_nerfs!
    take_money_from_banished_landed_characters!
    no_dynastic_country_names!
    allow_any_number_of_different_holding_types!
    allow_intermarriage!
    allow_heir_designation!
    pagans_can_go_feudal!
    more_banishment_reasons!
    add_dynastic_decisions!
    fix_gavelkind!
    cognatic_for_most_cultures!
    dont_mark_conscript_ships_important!
    preserve_culture_buildings!
  end
end

mb = CK2TweaksModBuilder.new(
  ParadoxGame.new(
    "source/ck2_2.3.4",
  ),
  "output/ck2tweaks"
)
mb.build!
